// vim: set expandtab sts=4 sw=4 ai:
import groovy.text.GStringTemplateEngine

plugins {
    id "nebula.lint" version "10.1.2"
    id "org.candlepin.gradle.SpecVersion"
}

ext {
    resteasy_version = "3.5.1.Final"
    jackson_version = "2.9.4"
    swagger_version = "1.5.7"
    logback_version = "1.2.3"
    guice_version = "4.1.0"
    checkstyle_version = "8.2"
}

allprojects {
    group = "org.candlepin"
    apply plugin: "maven"
    apply plugin: "nebula.lint"

    gradleLint {
        rules = ["dependency-parentheses"]
    }

    configurations {
        antlr
        commons
        collections
        core_testing
        ehcache
        guice
        jackson
        javax
        jukito
        logging_deps
        liquibase
        liquibase_slf4j
        oauth
        resteasy
        sun_jaxb
        swagger
    }

    dependencies {
        resteasy "org.jboss.resteasy:resteasy-jaxrs:$resteasy_version" exclude module: "*"
        resteasy "org.jboss.resteasy:resteasy-jaxb-provider:$resteasy_version" exclude module: "*"
        resteasy "org.jboss.resteasy:resteasy-guice:$resteasy_version" exclude module: "*"
        resteasy "org.jboss.resteasy:resteasy-atom-provider:$resteasy_version" exclude module: "*"
        resteasy "org.jboss.resteasy:resteasy-multipart-provider:$resteasy_version" exclude module: "*"
        resteasy "org.scannotation:scannotation:1.0.3" exclude module: "*"
        resteasy "org.apache.httpcomponents:httpclient:4.3.6" exclude module: "*"
        resteasy "org.apache.james:apache-mime4j:0.6" exclude module: "*"
        resteasy "javax.mail:mail:1.4.7" exclude module: "*"
        resteasy "javax.ws.rs:javax.ws.rs-api:2.1" exclude module: "*"
        resteasy "javax.json.bind:javax.json.bind-api:1.0" exclude module: "*"
        resteasy "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec:1.0.0.Final" exclude module: "*"
        resteasy "javax.annotation:javax.annotation-api:1.3.2" exclude module: "*"
        resteasy "org.eclipse.microprofile.rest.client:microprofile-rest-client-api:1.0.1" exclude module: "*"
        resteasy "org.reactivestreams:reactive-streams:1.0.0.final" exclude module: "*"

        jackson "com.fasterxml.jackson.core:jackson-annotations:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.core:jackson-core:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.core:jackson-databind:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.jaxrs:jackson-jaxrs-base:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.module:jackson-module-jsonSchema:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:$jackson_version" exclude module: "*"
        jackson "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version" exclude module: "*"

        // Used for swagger
        swagger "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version" exclude module: "*"
        swagger "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version" exclude module: "*"
        swagger "io.swagger:swagger-jaxrs:$swagger_version" exclude module: "*"
        swagger "io.swagger:swagger-core:$swagger_version" exclude module: "*"
        swagger "io.swagger:swagger-models:$swagger_version" exclude module: "*"
        swagger "io.swagger:swagger-annotations:$swagger_version" exclude module: "*"
        swagger "org.reflections:reflections:0.9.10" exclude module: "*"
        swagger "org.apache.commons:commons-lang3:3.2.1" exclude module: "*"

        sun_jaxb "com.sun.xml.bind:jaxb-impl:2.3.0" exclude module: "*"
        sun_jaxb "com.sun.xml.bind:jaxb-core:2.3.0" exclude module: "*"

        core_testing "org.junit.jupiter:junit-jupiter-api:5.3.1"
        core_testing "org.junit.vintage:junit-vintage-engine:5.3.1"
        core_testing "org.hamcrest:hamcrest-library:1.3"
        core_testing "org.hamcrest:hamcrest-core:1.3"
        core_testing "org.mockito:mockito-all:1.9.5"
        core_testing "pl.pragmatists:JUnitParams:1.0.3"

        jukito "org.jukito:jukito:1.4"

        logging_deps "ch.qos.logback:logback-core:$logback_version" exclude module: "*"
        logging_deps "ch.qos.logback:logback-classic:$logback_version" exclude module: "*"
        // Artifacts that bridge other logging frameworks to slf4j. Mime4j uses
        // JCL for example.
        logging_deps "org.slf4j:jcl-over-slf4j:1.7.12" exclude module: "*"
        logging_deps "org.slf4j:log4j-over-slf4j:1.7.12" exclude module: "*"
        logging_deps "org.slf4j:slf4j-api:1.7.25" exclude module: "*"

        javax "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final" exclude module: "*"
        javax "javax.transaction:jta:1.1" exclude module: "*"
        javax "javax.persistence:javax.persistence-api:2.2" exclude module: "*"

        antlr "antlr:antlr:2.7.7" exclude module: "*"

        ehcache "org.hibernate:hibernate-ehcache:5.3.6.Final" exclude module: "*"
        ehcache "net.sf.ehcache:ehcache:2.10.1" exclude module: "*"
        ehcache "org.ehcache:jcache:1.0.0"exclude module: "*"
        ehcache "javax.cache:cache-api:1.0.0" exclude module: "*"
        ehcache "net.sf.ehcache:management-ehcache-v2:2.10.1" exclude module: "*"

        commons "commons-codec:commons-codec:1.11"
        commons "commons-collections:commons-collections:3.2.2"
        commons "commons-io:commons-io:1.4"
        commons "commons-lang:commons-lang:2.5"

        guice "com.google.inject.extensions:guice-assistedinject:$guice_version" exclude module: "*"
        guice "com.google.inject.extensions:guice-multibindings:$guice_version" exclude module: "*"
        guice "com.google.inject.extensions:guice-servlet:$guice_version" exclude module: "*"
        guice "com.google.inject.extensions:guice-throwingproviders:$guice_version" exclude module: "*"
        guice "com.google.inject.extensions:guice-persist:$guice_version" exclude module: "*"
        guice "com.google.inject:guice:$guice_version" exclude module: "*"
        guice "aopalliance:aopalliance:1.0" exclude module: "*"
        guice "javax.inject:javax.inject:1" exclude module: "*"

        liquibase "org.liquibase:liquibase-core:3.1.0" exclude module: "*"
        liquibase_slf4j "com.mattbertolini:liquibase-slf4j:1.2.1" exclude module: "*"

        oauth "net.oauth.core:oauth:20100527" exclude module: "*"
        oauth "net.oauth.core:oauth-provider:20100527" exclude module: "*"

        collections "com.google.guava:guava:25.1-jre" exclude module: "*"

/*


VALIDATOR = ['org.hibernate.validator:hibernate-validator:jar:6.0.7.Final',
             'org.hibernate.validator:hibernate-validator-annotation-processor:jar:6.0.7.Final',
             'javax.validation:validation-api:jar:2.0.1.Final']

SERVLET = 'javax.servlet:servlet-api:jar:2.5'


SCHEMASPY = 'net.sourceforge:schemaSpy:jar:4.1.1'



SCANNOTATION = 'org.scannotation:scannotation:jar:1.0.3'
     */

    }
}

subprojects {
    apply plugin: "java"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "http://repo.jenkins-ci.org/public/" }
        maven { url "http://repository.jboss.org/nexus/content/groups/public/" }
        maven { url "http://oauth.googlecode.com/svn/code/maven/" }
        // For LogDriver
        ivy { url "http://awood.fedorapeople.org/ivy/candlepin/" }
    }
}

// Add checkstyle to just the common & server projects
configure(subprojects.findAll {it.name == "candlepin-common" || it.name == "candlepin"} ) {
    apply plugin: "checkstyle"
    configurations {
        checkstyle
    }

    ext {
        logdriver_class = "net.rkbloom.logdriver.LogDriver"
        use_logdriver = "true".equals(project.findProperty("logdriver"))

        cpdb_username = "candlepin"
        cpdb_password = ""
        db_name = "candlepin"
        if (! project.findProperty("db_host")||
                (project.findProperty("db_host") && "".equals(project.findProperty("db_host")))){
            db_host = "localhost"
        }
        if (project.findProperty("app_db_name") && ! "".equals(project.findProperty("app_db_name"))){
            db_name = project.findProperty("app_db_name")
        }
        // IF MYSQL set up the mysql stuff
        // else set up postgres (default)
        if (project.findProperty("database_server") == "mysql") {
            jdbc_driver_class = "com.mysql.jdbc.Driver"
            jdbc_dialect = "org.hibernate.dialect.MySQL5InnoDBDialect"
            jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.StdJDBCDelegate"
            jdbc_url = "jdbc:mysql://${db_host}/${db_name}"
        } else {
            jdbc_driver_class = "org.postgresql.Driver"
            jdbc_dialect = "org.hibernate.dialect.PostgreSQLDialect"
            jdbc_quartz_driver_class = "org.quartz.impl.jdbcjobstore.PostgreSQLDelegate"
            jdbc_url = "jdbc:postgresql://${db_host}/${db_name}"
        }

        amqp_enabled = "true".equals(project.findProperty("qpid"))
        external_broker = "true".equals(project.findProperty("external_broker"))
        hostedtest = "true".equals(project.findProperty("hostedtest"))
    }


    checkstyle {
        configFile = file("${rootProject.rootDir}/project_conf/checks.xml")
        configProperties = [
            "checkstyle.header.file": file("${rootProject.rootDir}/project_conf/HEADER.txt").getCanonicalPath(),
            "javadoc.type.scope": "package",
            "javadoc.method.scope": "public",
            "javadoc.lazy": "false",
            "javadoc.missing.param": "true",
            "javadoc.var.scope": "public",
            "checkstyle.cache.file": file("${project.buildDir}/cache/checkstyle.cache.src").getCanonicalPath()]
    }

    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:$checkstyle_version"
        checkstyle project(":checks")
    }
}

project(":checks") {
    description "Candlepin Checkstyle plugin"

    dependencies {
        compile "com.puppycrawl.tools:checkstyle:$checkstyle_version" exclude module: "*"
        compile "org.antlr:antlr4-runtime:4.5.3" exclude module: "*"
        compile "antlr:antlr:2.7.7" exclude module: "*"
    }
}

project(":candlepin-common") {
    apply plugin: Msgfmt
    apply plugin: Gettext

    msgfmt {
        resource "${project.group}.common.i18n.Messages"
    }

    // Add the source files generated by the msgfmt plugin
    // TODO make the msgfmt plugin add this sourceset to the project directly
    sourceSets.main.java.srcDirs += "${project.buildDir}/msgfmt/generated_source"

    // Exclude the generated i18n translation files from checkstyle
    tasks.withType(Checkstyle) {
        exclude "**/i18n/Messages*"
    }

    test {
        useJUnitPlatform()
    }

    configurations {
        compile {
            extendsFrom(
                    commons,
                    guice,
                    jackson,
                    javax,
                    liquibase,
                    logging_deps,
                    oauth,
                    resteasy,
                    collections
            )
        }
        testCompile {
            extendsFrom(
                    core_testing,
                    liquibase_slf4j,
                    jukito
            )
        }
    }

    dependencies {
        compile "com.googlecode.gettext-commons:gettext-commons:0.9.8"
        compile "javax.servlet:servlet-api:2.5" exclude module: "*"
        compile "javax.validation:validation-api:1.0.0.GA" exclude module: "*"
    }
}

project(":candlepin") {
    apply plugin: "war"
    apply plugin: Gettext

    description = "Candlepin Server"

    // Copy the resources to the main classes directory so that the
    // persistence context is in the the same classpath entry for
    // Hibernate annotation based discovery.
    sourceSets.main.output.resourcesDir = new File(buildDir, "classes/java/main")

    project.getTasks().getByName("gettext").dependsOn(":candlepin-common:gettext")
    gettext {
        keys_project_dir = "${project.rootDir}/common"
    }

    // Set the JVM arguments to be used for testing
    test {
        useJUnitPlatform()
        maxHeapSize = "2g"
        jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
    }

    // substitute the version & release in the version.properties used by the status resource at runtime
    processResources {
        from("src/main/resources") {
            include "version.properties"
            expand([version: project.getVersion(), release: project.findProperty("release")])
        }
    }

    war {
        if (! hostedtest){
            rootSpec.exclude("**/hostedtest/**")
        }
        manifest {
            attributes(
                    "Implementation-Title": "The Candlepin Project",
                    "Copyright": "Red Hat, Inc. 2018"
            )
        }

        // Copy the license file into place in the final manifest
        from(projectDir) {
            include "LICENSE"
            into("META-INF")
        }
    }

    configurations {
        compile {
            extendsFrom(
                    antlr,
                    commons,
                    ehcache,
                    guice,
                    jackson,
                    javax,
                    liquibase,
                    logging_deps,
                    sun_jaxb,
                    swagger,
                    resteasy,
                    collections
            )
        }
        testCompile {
            extendsFrom(
                    core_testing,
                    jukito,
                    liquibase_slf4j
            )
        }
    }

    task rspec(type: Rspec)

    // A task to generate the the candlepin config file for use in etc or other locations.
    task generateConfig() {
        def template = file("conf/candlepin.conf.template")
        def targetFile = file("$buildDir/candlepin.conf")
        doLast {
            // change contents via cli options
            def binding = [project: project]
            // change file contents
            def tmp = new GStringTemplateEngine().createTemplate(template).make(binding)
            targetFile.write(tmp.toString(), "UTF-8")
        }
    }

    dependencies {
        compile project(":candlepin-common")

        annotationProcessor "org.hibernate.validator:hibernate-validator-annotation-processor:6.0.7.Final"

        // Hibernate
        compile "org.hibernate:hibernate-core:5.3.6.Final" exclude module: "*"
        compile "org.hibernate:hibernate-c3p0:5.3.6.Final" exclude module: "*"
        compile "org.hibernate.common:hibernate-commons-annotations:5.0.2.Final" exclude module: "*"
        compile "org.hibernate:hibernate-tools:3.2.4.GA" exclude module: "*"
        compile "org.hibernate.validator:hibernate-validator:6.0.7.Final" exclude module: "*"
        compile "org.ow2.asm:asm:6.2.1" exclude module: "*"
        compile "net.bytebuddy:byte-buddy-dep:1.8.18" exclude module: "*"
        compile "cglib:cglib:2.2" exclude module: "*"
        compile "org.javassist:javassist:3.20.0-GA" exclude module: "*"
        compile "com.fasterxml:classmate:1.3.1" exclude module: "*"
        compile "org.freemarker:freemarker:2.3.15" exclude module: "*"
        compile "com.mchange:c3p0:0.9.5.2" exclude module: "*"
        compile "com.mchange:mchange-commons-java:0.2.11" exclude module: "*"
        compile "dom4j:dom4j:1.6.1" exclude module: "*"
        compile "org.jboss:jandex:2.0.0.Final" exclude module: "*"
        compile "org.jboss.logging:jboss-logging:3.3.0.Final" exclude module: "*"

        // DB Drivers
        compile "org.postgresql:postgresql:42.2.2" exclude module: "*"
        compile "mysql:mysql-connector-java:5.1.26" exclude module: "*"

        compile "com.googlecode.gettext-commons:gettext-commons:0.9.8" exclude module: "*"

        compile "org.mozilla:jss:4.5.0" exclude module: "*"
        compile "ldapjdk:ldapjdk:4.19" exclude module: "*"
        compile "org.quartz-scheduler:quartz:2.2.1" exclude module: "*"

        // These for ActiveMQ Artemis
        compile "org.apache.activemq:artemis-server:2.4.0" exclude module: "*"
        compile "org.apache.activemq:artemis-core-client:2.4.0" exclude module: "*"
        compile "org.apache.activemq:artemis-commons:2.4.0" exclude module: "*"
        compile "org.apache.activemq:artemis-selector:2.4.0" exclude module: "*"
        compile "org.apache.activemq:artemis-journal:2.4.0" exclude module: "*"
        compile "io.netty:netty-all:4.1.16.Final" exclude module: "*"
        compile "commons-beanutils:commons-beanutils:1.9.3" exclude module: "*"
        compile "org.jgroups:jgroups:3.6.13.Final" exclude module: "*"
        compile "org.apache.geronimo.specs:geronimo-json_1.0_spec:1.0-alpha-1" exclude module: "*"
        compile "org.apache.johnzon:johnzon-core:0.9.5" exclude module: "*"

        // AMQP drivers for talking to QPID
        compile "org.apache.qpid:qpid-common:0.32" exclude module: "*"
        compile "org.apache.qpid:qpid-client:0.32" exclude module: "*"
        compile "org.apache.mina:mina-core:1.0.1" exclude module: "*"
        compile "org.apache.mina:mina-filter-ssl:1.0.1" exclude module: "*"
        compile "geronimo-spec:geronimo-spec-jms:1.1-rc4" exclude module: "*"

        // Javascript engine
        compile "org.mozilla:rhino:1.7R3" exclude module: "*"

        // Validation
        compile "javax.validation:validation-api:2.0.1.Final" exclude module: "*"

        providedCompile "javax.servlet:servlet-api:2.5" exclude module: "*"

        if (use_logdriver){
            compile "org.slf4j:log4j-over-slf4j:1.7.5"
            compile "logdriver:logdriver:1.0"
        }

        // Testing DB Drivers
        testCompile "org.hsqldb:hsqldb:2.3.2" exclude module: "*"
        // Only include bouncycastle for testing purposes (compare against jss)
        testCompile "org.bouncycastle:bcpkix-jdk15on:1.60" exclude module: "*"
        testCompile "org.bouncycastle:bcprov-jdk15on:1.60" exclude module: "*"
    }
}
