#!/usr/bin/env ruby
$VERBOSE = nil

require 'pp'
require 'candlepin_api'

# Wrapper class for the base Candlepin lib that
# will introspect an instance for currently defined
# methods, allowing command line invocation of those
# methods.
#
# Also adds a little functionality to the base
# Candlepin lib that are specific to the cli.
class CandlepinCLI < Candlepin
  
  def commands
    # This is a little hacky...
    cp = Candlepin.new('admin', 'admin')
    cp.public_methods(false).sort.each do |method|
      yield method if callable_name? method
    end
  end

  def is_method?(method_name)
    respond_to? method_name.intern and callable_name? method_name
  end

  private

  def callable_name?(method_name)
    method_name[-1] != ?=
  end
  
end

cli = CandlepinCLI.new('admin', 'admin')

if ARGV.empty? or ARGV[0] == '--help'
  puts '=========== Commands ============'
  puts

  cli.commands do |command|
    puts command
  end
else
  method_name = ARGV[0]

  if cli.is_method? method_name
    args = ARGV[1..-1].collect do |arg|
      begin
        eval(arg)
      rescue Exception
        arg
      end
    end
    val = cli.send(method_name, *args)

    pp val
  else
    puts "#{method_name} is not a valid command!"
  end
end

