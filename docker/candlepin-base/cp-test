#!/bin/bash
#
# Launch point for the docker container to run Candlepin tests.
#
# Starts supervisor to manage services, then tries to cd to the correct
# location, either /candlepin-dev if you mounted this as a volume when
# running your container, otherwise the included /candlepin clone which
# we will make sure to update.
#
# See usage below.

# Exit on any error:
set -e

source /etc/profile

export HOME=/root

# Detect Java version and set JAVA_HOME accordingly
export JAVA_VERSION=$(java -version 2>&1 | head -1 | sed -r 's/^(java|openjdk) version \"([0-9]+\.[0-9]+\.[0-9]+).*\"/\2/')
export JAVA_HOME=/usr/lib/jvm/java-$JAVA_VERSION

export SUPERVISOR=1
export AUTOCONF=1
export FORCECERT=1

trapex() {
    target="$1"
    shift

    for sig in "$@"; do
        trap "$target $sig" "$sig"
        signals="$signals $sig"
    done
}

move_artifact() {
    if [ -f $1 ] && [ -d $2 ]; then
        cp -v $1 $2 || true
    fi
}

collect_artifacts() {
    # If the caller mounted a volume at /artifacts, copy server logs out:
    if [ -d "/artifacts" ]; then
        echo "Collecting artifacts..."

        # It's entirely possible for these to not exist, so we'll copy them if we can, but if we
        # fail, we shouldn't abort
        move_artifact '/var/log/candlepin/access.log' '/artifacts/'
        move_artifact '/var/log/candlepin/audit.log' '/artifacts/'
        move_artifact '/var/log/candlepin/candlepin.log' '/artifacts/'
        move_artifact '/var/log/candlepin/error.log' '/artifacts/'
        move_artifact '/var/log/candlepin/checkstyle.log' '/artifacts/'
        move_artifact '/var/log/candlepin/unit_tests.log' '/artifacts/'
        move_artifact '/var/log/candlepin/rspec.log' '/artifacts/'
    fi
}

# Be sure to run cleanup on any error, SIGINT, or SIGTERM
trapex cleanup SIGINT SIGTERM ERR EXIT
CLEANUP_RUN=0

cleanup() {
    if [ "$CLEANUP_RUN" == "0" ]; then
        CLEANUP_RUN=1

        # Remove our traps so we don't keep trying to call this
        trap - $signals
        trap "" ERR EXIT

        # Run buildr clean in our target CP directory
        cd $CP_HOME
        buildr clean

        # Collect artifacts up to this point. If we're about to drop into a shell, we'll leave any
        # additional artifact collection up to the user
        collect_artifacts

        # Errors in the script should still launch the shell, as they're likely CP config errors, not
        # actual errors with the script
        if [ "$1" == "" ] || [ "$1" == "ERR" ] || [ "$1" == "EXIT" ]; then
            if [ "$LAUNCHSHELL" == "1" ]; then
                echo "Launching shell..."
                /bin/bash -i -l
            fi
        else
            # exit, propagating any signal we received
            kill -$1 $$
        fi
    fi
}

usage() {
    cat <<HELP
    usage: cp-test [options]

    OPTIONS:
        -d  deploy a live candlepin
        -t  populate Candlepin database with test data (implies -d)
        -r  run rspec test suite (implies -d)
        -H  run rspec tests in "hosted" mode (implies -r and -d)
        -u  run unit test suite
        -l  run the linter against the code
        -s  run a bash shell when done
        -c  git reference to checkout
        -p  subproject to build (defaults to "server")
        -v  enable verbose/debug output
HELP
}

while getopts ":dtrHulsc:p:v" opt; do
    case $opt in
        d  ) DEPLOY="1";;
        t  )
            DEPLOY="1"
            TESTDATA="1"
            ;;
        r  )
            RSPEC="1"
            DEPLOY="1"
            ;;
        H  )
            HOSTED="1"
            RSPEC="1"
            DEPLOY="1"
            ;;
        u  ) UNITTEST="1";;
        l  ) LINTER="1";;
        s  ) LAUNCHSHELL="1";;
        c  ) CHECKOUT="${OPTARG}";;
        p  ) PROJECT="${OPTARG}";;
        v  ) VERBOSE="1";;
        ?  ) usage; exit;;
    esac
done

shift $(($OPTIND - 1))

PROJECT=${PROJECT:-server}

# WARNING: control+c while this is running will take out supervisor as well.
/usr/bin/supervisord -c /etc/supervisord.conf

# Pass volume with docker run mounted at this location if you'd like to
# run against your source checkout.
# i.e. -v /home/dgoodwin/src/candlepin:/candlepin-dev
if [ -d "/candlepin-dev" ]; then
    echo "Using mounted volume /candlepin-dev"
    CP_HOME="/candlepin-dev/"
    cd $CP_HOME
else
    # Otherwise we use the clone in the image and try to update it.
    echo "Using /candlepin."
    CP_HOME="/candlepin"
    cd $CP_HOME
    git pull
    if [ ! -z "$CHECKOUT" ]; then
        echo "Checking out: $CHECKOUT"
        git checkout $CHECKOUT
    fi
fi

# Make sure we update the ruby bundle:
bundle install
mkdir -p /var/log/candlepin

if [ "$LINTER" == "1" ]; then
    cd $CP_HOME
    echo "Running linter..."
    buildr checkstyle | tee /var/log/candlepin/checkstyle.log
fi

# TODO: keep track of return code?
cd $CP_HOME/$PROJECT

if [ "$UNITTEST" == "1" ]; then
    echo "Running unit tests."
    buildr test | tee /var/log/candlepin/unit_tests.log
fi

if [ "$DEPLOY" == "1" ]; then
    echo "Deploying candlepin."

    DEPLOY_FLAGS="-g"

    if [ "$RSPEC" == "1" ] && [ "$HOSTED" == "1" ] && (bin/deploy '-?' | grep -q -- '-H'); then
        DEPLOY_FLAGS="$DEPLOY_FLAGS -H -a"
    fi

    if [ "$TESTDATA" == "1" ]; then
        DEPLOY_FLAGS="$DEPLOY_FLAGS -t"
    fi

    if [ "$VERBOSE" == "1" ]; then
        DEPLOY_FLAGS="$DEPLOY_FLAGS -v"
    fi

    bin/deploy $DEPLOY_FLAGS
    sleep 7
fi

if [ "$RSPEC" == "1" ]; then
    echo "Running rspec tests."
    buildr rspec | tee /var/log/candlepin/rspec.log
fi

cleanup
