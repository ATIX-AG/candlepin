# vi:syntax=ruby

require 'buildr/java/emma'
require 'rspec/core/rake_task'
require 'json'

# Don't require findbugs by default.
# needs "buildr-findBugs" gem installed
# (and findbugs and its large set of deps)
findbugs = ENV['findbugs']
unless findbugs.nil?
  require 'buildr-findBugs'
end

use_pmd = ENV['pmd']
unless use_pmd.nil?
  require 'buildr/pmd'
end

### Repositories
repositories.remote << "http://jmrodri.fedorapeople.org/ivy/candlepin/"
repositories.remote << "http://repository.jboss.org/nexus/content/groups/public/"
repositories.remote << "http://gettext-commons.googlecode.com/svn/maven-repository/"
repositories.remote << "http://central.maven.org/maven2/"

### Dependencies
RESTEASY = [group('jaxrs-api',
                  'resteasy-jaxrs',
                  'resteasy-jaxb-provider',
                  'resteasy-guice',
                  :under => 'org.jboss.resteasy',
                  :version => '2.3.7.Final'),
            'org.scannotation:scannotation:jar:1.0.2',
            'org.apache.httpcomponents:httpclient:jar:4.1.2']

JACKSON_NS = "com.fasterxml.jackson"
JACKSON_VERSION = "2.3.0"
JACKSON = [group('jackson-annotations', 'jackson-core', 'jackson-databind',
                 :under=> "#{JACKSON_NS}.core",
                 :version => JACKSON_VERSION),
           group('jackson-jaxrs-base', 'jackson-jaxrs-json-provider',
                 :under=> "#{JACKSON_NS}.jaxrs",
                 :version => JACKSON_VERSION),
           group('jackson-module-jsonSchema', 'jackson-module-jaxb-annotations',
                 :under=> "#{JACKSON_NS}.module",
                 :version => JACKSON_VERSION)]

SUN_JAXB = 'com.sun.xml.bind:jaxb-impl:jar:2.1.12'

JUKITO = Buildr.transitive(['junit:junit:jar:4.11',
             'org.mockito:mockito-all:jar:1.9.5',
             'org.jukito:jukito:jar:1.4'])

HSQLDB = 'hsqldb:hsqldb:jar:1.8.0.10'

TESTING = [HSQLDB, JUKITO]

LOGBACK = [group('logback-core', 'logback-classic',
                 :under => 'ch.qos.logback',
                 :version => '1.0.13')]

# Artifacts that bridge other logging frameworks to slf4j. Mime4j uses
# JCL for example.
SLF4J_BRIDGES = 'org.slf4j:jcl-over-slf4j:jar:1.7.5'
LOGGING = [LOGBACK]

HIBERNATE = [group('hibernate-core', 'hibernate-entitymanager', 'hibernate-c3p0',
                   :under => 'org.hibernate',
                   :version => '4.2.5.Final'),
             'org.hibernate.common:hibernate-commons-annotations:jar:4.0.1.Final',
             'org.hibernate:hibernate-tools:jar:3.2.4.GA',
             'org.hibernate:hibernate-validator:jar:4.3.1.Final',
             'org.hibernate.javax.persistence:hibernate-jpa-2.0-api:jar:1.0.1.Final',
             'antlr:antlr:jar:2.7.7',
             'asm:asm:jar:3.0',
             'cglib:cglib:jar:2.2',
             'javassist:javassist:jar:3.12.0.GA',
             'javax.transaction:jta:jar:1.1',
             'org.slf4j:slf4j-api:jar:1.7.5',
             'org.freemarker:freemarker:jar:2.3.15',
             'c3p0:c3p0:jar:0.9.1.2',
             'dom4j:dom4j:jar:1.6.1',
             'org.jboss.logging:jboss-logging:jar:3.1.1.GA',
             'javax.validation:validation-api:jar:1.0.0.GA']

POSTGRESQL = 'postgresql:postgresql:jar:9.0-801.jdbc4'

DB = [POSTGRESQL]

GETTEXT_COMMONS = 'org.xnap.commons:gettext-commons:jar:0.9.6'

COMMONS = ['commons-codec:commons-codec:jar:1.4',
           'commons-collections:commons-collections:jar:3.1',
           'commons-io:commons-io:jar:1.3.2',
           'commons-lang:commons-lang:jar:2.5']

SERVLET = 'javax.servlet:servlet-api:jar:2.5'

GUICE =  [group('guice-assistedinject', 'guice-multibindings',
                'guice-servlet', 'guice-throwingproviders', 'guice-persist',
                :under=>'com.google.inject.extensions',
                :version=>'3.0'),
           'com.google.inject:guice:jar:3.0',
           'aopalliance:aopalliance:jar:1.0',
           'javax.inject:javax.inject:jar:1']

COLLECTIONS = 'com.google.guava:guava:jar:13.0'

AMQP  = [group('qpid-common', 'qpid-client',
               :under => 'org.apache.qpid',
               :version => '0.22'),
         group('mina-core', 'mina-filter-ssl',
               :under => 'org.apache.mina',
               :version => '1.0.1'),
         'geronimo-spec:geronimo-spec-jms:jar:1.1-rc4']

RHINO = 'org.mozilla:rhino:jar:1.7R3'

# servlet-api is provided by the servlet container and Tomcat won't
# even load servlet API classes seen in WEB-INF/lib.  See section 9.7.2 of
# Servlet Spec 2.4 and http://stackoverflow.com/questions/15601469
PROVIDED = [SERVLET]

### Project
GROUP = "candlepin"
COPYRIGHT = ""

desc "The Gutterball project"
define "gutterball" do
  release_number = ""
  File.new("#{project.name}.spec").each_line do |line|
    if line =~ /\s*Version:\s*(.*?)\s*$/
      project.version = $1
    end

    if line =~ /\s*Release:\s*(.*?)\s*$/
      release_number = $1.chomp("%{?dist}")
    end
  end

  project.group = GROUP
  manifest["Implementation-Vendor"] = COPYRIGHT

  # eclipse settings
  # http://buildr.apache.org/more_stuff.html#eclipse
  eclipse.natures :java

  checkstyle.config_directory = path_to(:conf)
  # checkstyle.properties['checkstyle.header.file'] = File.join(checkstyle.config_directory, 'HEADER.txt')
  # checkstyle.properties['checkstyle.cache.file'] = File.join(path_to(:target), 'checkstyle.cache.src')
  # checkstyle.properties['javadoc.type.scope'] = 'package'
  # checkstyle.properties['javadoc.method.scope'] = 'public'
  # checkstyle.properties['javadoc.lazy'] = 'false'
  # checkstyle.properties['javadoc.var.scope'] = 'package'
  # checkstyle.properties['javadoc.missing.param'] = 'true'

  resource_substitutions = {
    'version' => project.version,
    'release' => release_number,
  }
  resources.filter.using(resource_substitutions)
  test.resources.filter.using(resource_substitutions)

  if not use_pmd.nil?
    pmd.enabled = true
  end

  ### Building
  compile.options.target = '1.6'
  compile.options.source = '1.6'
  compile_classpath = [
    RESTEASY,
    COMMONS,
    GETTEXT_COMMONS,
    LOGGING,
    HIBERNATE,
    GUICE,
    JACKSON,
    SUN_JAXB,
    RHINO,
    COLLECTIONS,
    AMQP,
    DB,
    PROVIDED,
  ]
  compile.with compile_classpath

  ### Testing
  test.setup do |task|
    filter('src/main/resources/META-INF').into('target/classes/META-INF').run
  end

  # the other dependencies transfer from compile.classpath automagically
  test.with HSQLDB, TESTING
  test.using :java_args => [ '-Xmx2g', '-XX:+HeapDumpOnOutOfMemoryError' ]

  package(:war, :id=> project.name).tap do |war|
    war.libs -= artifacts(PROVIDED)
  end

  desc "generate a .syntastic_class_path for vim/syntastic"
  task :list_classpath do
    # see https://github.com/scrooloose/syntastic/blob/master/syntax_checkers/java/javac.vim
    # this generates a .syntastic_class_path so the syntastic javac checker will work properly
    File.open(".syntastic_class_path", "w") do |f|
      compile.dependencies.each { |dep| f.puts(dep) }
      f.puts(path_to(:target, :classes))
    end
  end

  desc 'run rpmlint on the spec file'
  task :rpmlint do
    sh('rpmlint -f rpmlint.config #{project.name}.spec')
  end
end

#==========================================================================
# RSpec functional tests
#==========================================================================
RSpec::Core::RakeTask.new do |task|

  # Support optional features env variable, specify the spec files to run
  # without the trailing '_spec.rb'. Specify multiple by separating with ':'.
  # i.e. build spec features=flex_expiry:authorization
  features = ENV['features']
  if not features.nil?
    feature_files = Array.new
    features.split(":").each do |part|
      feature_files << "spec/#{part}_spec.rb"
    end
    task.pattern = feature_files
  end

  task.rspec_opts = ["-I#{File.expand_path 'client/ruby/'}"]
  task.rspec_opts << '-c'
  skipbundler = ENV['skipbundler']
  if not skipbundler.nil?
    task.skip_bundler = true
  end

  # Allow specify only="should do something" to run only a specific
  # test. The text must completely match the contents of your "it" string.
  only_run = ENV['only']
  if not only_run.nil?
    task.rspec_opts << "-e '#{only_run}'"
  end

  fail_fast = ENV['fail_fast']
  if not fail_fast.nil?
    task.rspec_opts << "--fail-fast"
  end

  dots = ENV['dots']
  if not dots.nil?
    task.rspec_opts << "-fp"
  else
    task.rspec_opts << "-fd"
  end
end
#task :spec => :deploy_check

# fix the coverage reports generated by emma.
# we're adding to the existing emma:html task here
# This is AWESOME!
namespace :emma do
 task :html do
  info "Fixing emma reports"
  #fixemmareports("reports/emma/coverage.html")

  dir = "reports/emma/_files"
  Dir.foreach(dir) do |filename|
    fixemmareports("#{dir}/#{filename}") unless filename == "." || filename == ".."
  end
 end
end

# fixes the html produced by emma
def fixemmareports(filetofix)
  text = File.read(filetofix)
  newstr = ''
  text.each_byte do |c|
    if c != 160 then
      newstr.concat(c)
    else
      newstr.concat('&nbsp;')
    end
  end
  tmp = File.new("tmpreport", "w")
  tmp.write(newstr)
  tmp.close()
  FileUtils.copy("tmpreport", filetofix)
  File.delete("tmpreport")
end
