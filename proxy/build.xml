<?xml version="1.0"?>

<!--
  Spacewalk build file, please indent 2 spaces. NO TABS!
-->
<project name="candlepin" default="all">

  <!-- setup properties -->
  <property environment="env" />
  <property file="${user.home}/.${ant.project.name}.properties" />
  <property file="buildconf/build.properties" />

  <path id="bootjars">
    <fileset dir="${boot.lib.dir}" includes="*.jar" />
  </path>
  
  <path id="testjars">
    <fileset dir="${test.lib.dir}" includes="*.jar" />
  </path>
  
  <path id="runjars">
    <fileset dir="${run.lib.dir}" includes="**/*.jar" />
  </path>

  <path id="libjars">
    <fileset dir="lib/" includes="**/*.jar" />
  </path>
  
  <path id="buildjars">
    <path refid="testjars" />
    <fileset dir="${build.lib.dir}">
      <include name="*.jar" />
      <include name="log4j.properties" />
      <include name="${build.dir}/classes/" />
    </fileset>
  </path>

  <path id="alljars">
    <path refid="buildjars" />
    <path refid="runjars" />
  </path>

  <!-- setup macros -->
  <import file="buildconf/build-taskdefs.xml" />
  <import file="buildconf/build-utils.xml" />

  <!-- define tasks -->
  <target name="prepare" depends="init-taskdefs">
        <mkdir dir="${build.dir}/src"/>
  </target>

  <target name="boot-deps" unless="installbuild">
    <mkdir dir="${boot.lib.dir}" />
    <jpackage-deps jars="${boot.jar.dependencies}" dir="${boot.lib.dir}" />
  </target>

  <!-- only runs if we are missing a jpackage dir; speeds builds -->
  <target name="link-jars" depends="test-deps,resolve" if="missing-deps">
    <mkdir dir="${build.lib.dir}" />
    <mkdir dir="${run.lib.dir}" />
    <mkdir dir="${run-external.lib.dir}" />
    <mkdir dir="${test.lib.dir}" />

    <link-jars ivyxml="${candlepin.home}/ivy.xml" libdir="${lib.dir}"
               jars="${build.jar.dependencies}" dir="${build.lib.dir}" />
    <link-jars ivyxml="${candlepin.home}/ivy.xml" libdir="${lib.dir}"
               jars="${test.jar.dependencies}" dir="${test.lib.dir}"/>
    <link-jars ivyxml="${candlepin.home}/ivy.xml" libdir="${lib.dir}"
               jars="${run.jar.dependencies}" dir="${run-external.lib.dir}"/>
    <!--
         allows adding jar files for quick testing of tools
         that do not have RPMs yet.
     -->
    <copy toDir="${build.lib.dir}" overwrite="true" failonerror="false">
      <fileset dir="${candlepin.home}/buildconf/tempjars">
          <include name="**/*.jar" />
          <include name="**/*.properties" />
      </fileset>
    </copy>
    <copy toDir="${run-external.lib.dir}" overwrite="true" failonerror="false">
      <fileset dir="${candlepin.home}/buildconf/tempjars">
          <include name="**/*.jar" />
          <include name="**/*.properties" />
      </fileset>
    </copy>
    </target>

  <!-- see if any of the jpackage managed dirs are missing -->
  <target name="test-deps">
    <condition property="missing-deps">
      <not>
        <and>
          <available file="${build.lib.dir}" type="dir" />
          <available file="${run.lib.dir}" type="dir" />
          <available file="${test.lib.dir}" type="dir" />
        </and>
      </not>
    </condition>
  </target>

  <target name="coverage-report" depends="instrument" if="ccbuild">
    <!-- This is really stupid, but jcoverage can't deal with having code
         with different top-level directories, so we copy all code to a
         single root dir.  :-(  -->
    <mkdir dir="${build.dir}/src-copy" />
    <copy toDir="${build.dir}/src-copy">
      <fileset dir="code/src">
        <include name="**/*.java" />
        <exclude name="**/*Task.java" />
      </fileset>
    </copy>

    <emma enabled="true">
      <report sourcepath="${build.dir}/src-copy"
              sort="+block,+name,+method,+class"
              metrics="method:70,block:80,line:80,class:100">
        <infileset dir="${candlepin.home}" includes="*.em, *.ec" />
        <!-- txt outfile="${report.dir}/emma.txt"
             depth="package"
             columns="class,method,block,line,name" / -->
        <html outfile="${report.dir}/emma.html"
              depth="method"
              columns="name,class,method,block,line" />
        <xml outfile="${report.dir}/emma.xml"
             depth="method"
             columns="name,class,method,block,line" />
      </report>
    </emma>

    <delete dir="${build.dir}/src-copy" />
  </target>

  <target name="init"
          depends="resolve,link-jars,init-taskdefs">
    <tstamp />
  </target>

  <target name="all" depends="init,compile,pack"
          description="Compile and pack - no code generation in this step" />

  <target name="init-cc" depends="set-cc-config-dir,boot-deps,init-ivy">
    <property name="ccbuild" value="true" />
  </target>

  <target name="cctarget"
          depends="init-cc,all,cc-test,test-report,coverage-report,apidoc-jsp,javadoc"
          description="Target called by cruisecontrol process">
  </target>

  <target name="cc-test" depends ="set-cc-config-dir, test"/>

  <target name="set-cc-config-dir">
    <property name="rhn.config.dir"
              value="${candlepin.home}/buildconf/builder/config/satellite" />
  </target>

  <target name="testdebug">
    <property name="debug"
              value="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"/>
    <antcall target="dotest" />
  </target>

  <target name="test">
    <property name="debug" value=""/>
    <antcall target="dotest"/>
  </target>

  <target name="dotest"
          description="Run the tests (use -Dtestsubsystem=&lt;subsystem&gt; or -Dtestcase=&lt;testcase&gt;)"
          depends="compile-main,init-tests,invoke-tests-testcase,invoke-tests-subsystem,invoke-tests-all" >

    <fail if="junit_test_failure" message="One or more tests failed" />
  </target>

  <target name="run" description="runs a class with a main method" depends="compile">
    <java fork="true"
          classname="${classname}"
          failonerror="true" >
          <classpath>
            <pathelement path="${build.dir}/classes" />
            <path refid="alljars"/>
          </classpath>
    </java>
  </target>

  <target name="test-report" depends="init-tests"
          description="Pretty-print the results of a previous test run.">
    <junitreport todir="${testresults.dir}">
      <fileset dir="${testresults.dir}">
        <include name="TEST-*.xml"/>
        <exclude name="${testresults.exclude}"/>
      </fileset>
      <report format="frames" todir="${report.dir}/test-report"/>
    </junitreport>
  </target>

  <target name="create-local-repo" description="Create a local Ivy repo">
     <mkdir dir="${user.home}/.ivy/${ant.project.name}/local/" />
  </target>

  <target name="clean-all" description="Nukes EVERYTHING including jar cache"
          depends="clean,clean-cache" />

  <target name="clean-cache" description="Removes the Ivy jar cache">
     <delete dir="${lib.dir}" quiet="true" />
     <delete dir="${user.home}/.ivy/${ant.project.name}/cache/" quiet="true" />
  </target>

  <target name="clean" description="Remove all build artifacts">
    <delete dir="${build.dir}" quiet="true"/>
    <delete>
      <fileset dir="${candlepin.home}" includes="junit*.properties" />
    </delete>
    <delete>
      <fileset defaultexcludes="no" dir="${candlepin.home}">
        <include name="**/*~" />
        <include name="velocity.log*" />
        <include name="coverage.ec" />
        <include name="coverage.em" />
      </fileset>
    </delete>
  </target>

  <target name="apidoc-singlepage" description="Generate the api for jsps" depends="init">
    <property name="doclet.class" value="SinglePageDoclet" />
    <property name="template.dir" value="singlepage" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc-jsp" description="Generate the api for jsps" depends="init">
    <property name="doclet.class" value="JSPDoclet" />
    <property name="template.dir" value="jsp" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc-list" description="Generate the api for jsps" depends="init">
    <property name="doclet.class" value="ListDoclet" />
    <property name="template.dir" value="list" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc-html" description="Generate the api for jsps" depends="init">
    <property name="doclet.class" value="HtmlDoclet" />
    <property name="template.dir" value="html" />
    <antcall target="apidoc" />
  </target>

  <target name="apidoc" description="Generate the api documentation" depends="init">
    <path id="javadocpath">
    <path refid="buildjars" />
      <pathelement location="build/classes" />
    </path>

    <mkdir dir="${report.dir}/apidocs" />
    <mkdir dir="${report.dir}/apidocs/${template.dir}/" />
    <mkdir dir="${report.dir}/apidocs/${template.dir}/handlers/" />
    <javadoc doclet="com.redhat.rhn.internal.doclet.${doclet.class}" docletpathref="javadocpath" classpathref="buildjars" sourcepath="code/src" additionalparam="-quiet">
      <fileset dir="code" >
        <include name="**/src/com/redhat/rhn/frontend/xmlrpc/**/*Handler.java" />
        <include name="**/src/com/redhat/rhn/frontend/xmlrpc/serializer/*Serializer.java" />
        <include name="**/src/com/redhat/rhn/domain/config/xmlrpc/serializer/*Serializer.java" />
      </fileset>
      <excludepackage name="**/*" />
    </javadoc>

  </target>

  <target name="javadoc" description="Generate the java-doc" depends="init">
    <javadoc destdir="${report.dir}/javadoc" author="true" version="true"
             use="true" failonerror="true" classpathref="buildjars"
             stylesheetfile="${src.dir}/webapp/css/rhnjavadoc.css"
             breakiterator="yes" useexternalfile="true" maxmemory="128m" >
      <tag name="todo" scope="all" description="To do:" />
      <tag name="xmlrpc.param" scope="methods" enabled="false"/>
      <tag name="xmlrpc.returntype" scope="methods" enabled="false"/>
      <tag name="xmlrpc.namespace" scope="types" enabled="false"/>
      <tag name="xmlrpc.doc" scope="all" enabled="false"/>
      <tag name="xmlrpc.serializer" scope="methods" enabled="false"/>
      <fileset dir="code" >
        <include name="**/src/**/*.java" />
        <exclude name="**/test/**" />
        <exclude name="**/testing/*TestUtils.java" />
        <exclude name="**/testing/*Test.java" />
        <exclude name="**/internal/**" />
      </fileset>
      <fileset dir="${build.dir}/src" >
        <include name="**/*.java" />
      </fileset>
    </javadoc>
    <echo message="javadoc finished."/>
    <copy file="${src.dir}/webapp/img/inherit.gif"
          tofile="${report.dir}/javadoc/resources/inherit.gif"
          overwrite="yes" />
  </target>

  <target name="javadoc-deploy" description="Locally deploy javadocs"
          depends="javadoc">
    <delete quiet="true">
      <fileset dir="${javadoc.deploydir}"
               includes="**/*.html"
               followsymlinks="false"/>
    </delete>
    <copy todir="${javadoc.deploydir}">
      <fileset dir="${report.dir}/javadoc"
               includes="**/*.html" />
    </copy>
  </target>

  <!-- We may want to break this down so that we can specify directories or
       classes to operate on.  But, hopefully our checkstyle report will
       generally be clean, so we may be able to always check all classes. -->
  <target name="checkstyle" depends="init">
    <mkdir dir="${report.dir}" />
    <checkstyle config="buildconf/checkstyle.xml" failOnViolation="true" >
      <property key="javadoc.method.scope" value="public" />
      <property key="javadoc.type.scope" value="package" />
      <property key="javadoc.var.scope" value="package" />
      <property key="javadoc.lazy" value="${javadoc.lazy}" />
      <property key="checkstyle.cache.file" value="${checkstyle.cache.src}" />
      <fileset dir="code" >
        <include name="**/src/**/*.java" />
        <exclude name="**/test/*.java" />
      </fileset>
      <classpath>
          <path refid="buildjars" />
          <pathelement path="${build.dir}/classes" />
      </classpath>
      <formatter type="plain" />
      <formatter type="xml" toFile="${report.dir}/checkstyle_report.xml" />
    </checkstyle>
    <checkstyle config="buildconf/checkstyle.xml" failOnViolation="true" >
      <property key="javadoc.method.scope" value="nothing" />
      <property key="javadoc.type.scope" value="nothing" />
      <property key="javadoc.var.scope" value="nothing" />
      <property key="javadoc.lazy" value="true" />
      <property key="checkstyle.cache.file" value="${checkstyle.cache.test}" />
      <fileset dir="code" >
        <include name="**/test/*.java" />
      </fileset>
      <formatter type="plain" />
      <formatter type="xml" toFile="${report.dir}/checkstyle_report_test.xml" />
    </checkstyle>
  </target>

  <target name="pack" depends="init,pack-megajar,pack-webapp"
          description="Create jars and copy descriptors" />

  <target name="instrument" depends="init-taskdefs" if="ccbuild">
    <emma enabled="true">
      <instr outdir="${build.instrument.dir}" merge="no"
          instrpath="${build.dir}/classes" mode="fullcopy"
          outfile="${candlepin.home}/coverage.em" >
        <filter excludes="*.internal.*" />
        <filter excludes="*.scripts.*" />
        <filter excludes="*Mock*" />
        <filter excludes="*Constants" />
        <filter excludes="*Exception" />
        <filter excludes="*.test.*" />
        <filter excludes="com.redhat.common.*" />
        <filter excludes="com.redhat.services.*" />
        <filter excludes="com.redhat.rhn.testing.*" />
      </instr>
    </emma>

    <copy toDir="${build.instrument.dir}/classes">
      <fileset dir="${build.dir}/classes">
        <include name="**/*.xml" />
      </fileset>
    </copy>
  </target>

  <!-- Anything below this line should not generally be run from the command
       line.  These are the tasks that actually implement the public tasks -->

  <!-- ============== Compile tasks ================== -->
  <target name="compile" depends="init, compile-main"
          description="Compile source" />

  <target name="compile-main" depends="link-jars,prepare"
          description="Compile the main codebase" unless="installbuild">
    <mkdir dir="${build.dir}/classes" />
    <javac destdir="${build.dir}/classes"
           optimize="off"
           debug="on"
           source="1.5"
           target="1.5"
           deprecation="${deprecation}"
           nowarn="${nowarn}"
           encoding="utf-8"
           fork="yes"
           memoryMaximumSize="256m"
           classpathref="buildjars" >
      <src>
        <path location="${build.dir}/src" />
        <path location="${src.dir}/java" />
        <path location="src/test/java" />
      </src>
    </javac>

    <copy toDir="${build.dir}/classes">
      <fileset dir="${src.dir}/java">
        <exclude name="**/*.java" />
        <exclude name="**/package.html" />
      </fileset>
    </copy>
  </target>

  <!-- =================== Testing ======================= -->
  <target name="setup-tests-cc" if="ccbuild">
    <property name="test.bin.dir" value="${build.instrument.dir}/classes" />
  </target>

  <target name="setup-tests" unless="ccbuild">
    <property name="test.bin.dir" value="${build.dir}/classes" />
  </target>

  <target name="init-tests" depends="instrument,setup-tests-cc,setup-tests">
    <property name="testresults.dir" value="${report.dir}/tests" />

    <path id="tests.buildpath" >
      <path location="${build.dir}/classes" />
      <path refid="alljars" />
    </path>

    <path id="tests.runpath" >
      <path location="${test.bin.dir}" />
      <path refid="testjars" />
      <path refid="alljars" />
      <path location="${src.dir}/webapp/" />
    </path>

    <mkdir dir="${testresults.dir}" />
  </target>

  <target name="check-testcase-name" if="testcase">
    <propertyregex property="valid.testcase"
                   input="${testcase}"
                   regexp="(.*)Test$"
                   select="\1"
                   casesensitive="true" />
  </target>

  <target name="check-testcase" depends="check-testcase-name" if="testcase"
      unless="valid.testcase">
    <fail message="Invalid testcase name: ${testcase}. Class name must look like .*Test"/>
  </target>

  <!-- ================= Invoke tests ==================== -->
  <target name="invoke-tests-testcase" depends="check-testcase" if="testcase">
    <property name="testcaseorsubsystem" value="true" />
    <run-junit include="**/${testcase}.class" banner="${testcase}"
        testbuilddir="${build.dir}/classes"
        classpathid="tests.runpath" reportdir="${testresults.dir}"
        debug="${debug}"/>
  </target>

  <target name="invoke-tests-subsystem" if="testsubsystem">
    <property name="testcaseorsubsystem" value="true" />
    <run-junit include="**/${testsubsystem}/**/*Test.class"
                banner="all tests in ${testsubsystem} subsystem"
                testbuilddir="${build.dir}/classes"
                classpathid="tests.runpath" reportdir="${testresults.dir}"
                debug="${debug}" />
  </target>

  <target name="invoke-tests-all" unless="testcaseorsubsystem">
    <!--
    <antcall target="checkstyle" />
    -->
    <run-junit include="**/*Test.class"
               banner="all tests"
               testbuilddir="${build.dir}/classes"
               exclude="**/AuthenticationServiceTest.class"
               classpathid="tests.runpath"
               reportdir="${testresults.dir}"/>
  </target>

  <target name="unwar-webapp" depends="pack" >
    <unjar src="${candlepin.war}"
           dest="${build.dir}/webapp/${ant.project.name}" />
  </target>

  <!-- =================== Packaging Tasks ======================= -->
  <target name="megajar-init">
    <mkdir dir="${run.lib.dir}" />
  </target>

  <target name="pack-megajar" depends="megajar-init, compile">
    <delete file="${megajar.jar}" />
    <jar destfile="${megajar.jar}">
      <fileset dir="${build.dir}/classes">
        <!-- internal is not for publication; tlds go in META-INF;
             html go as javadoc elsewhere -->
        <exclude name="**/internal/**" />
        <exclude name="**/*.tld" />
        <exclude name="**/*.html" />
        <exclude name="**/test/*" />
        <exclude name="**/log4j.properties" />
        <exclude name="**/*.conf" />
        <exclude name="**/*.conf.rpmsave" />
        <exclude name="**/test/validation/userCreateForm.xsd" />
      </fileset>
      <!-- ugh, we can't flatten this like we would with a <copy> tag
           or use a mapper, alas -->
      <!-- metainf dir="${build.dir}/classes/com/redhat/rhn/frontend/taglibs">
        <include name="*.tld" />
      </metainf -->
    </jar>
  </target>

  <target name="pack-webapp" depends="compile,pack-megajar">
    <mkdir dir="${build.dir}/webapp" />
    <war destfile="${candlepin.war}" webxml="${src.dir}/resources/WEB-INF/web.xml">
      <fileset dir="${src.dir}/resources">
        <exclude name="WEB-INF/web.xml"/>
      </fileset>
      <classes dir="${build.dir}/classes">
        <include name="log4j.properties" />
      </classes>
      <classes dir="${build.dir}/classes">
        <include name="logging.properties" />
      </classes>
      <lib dir="${run.lib.dir}">
        <include name="${ant.project.name}.jar"/>
      </lib>
      <lib dir="${run-external.lib.dir}">
        <!-- Don't want the Oracle drivers which use JNI in the war. -->
        <exclude name="**/ojdbc*" />
        <exclude name="**/oracle-jdbc*" />
        <exclude name="**/servlet*" />
      </lib>
    </war>
  </target>

  <!-- ================== resolver ===================== -->
  <target name="resolve" depends="resolve-ivy,resolve-local" />

  <target name="resolve-local" if="installbuild">
    <mkdir dir="${build.lib.dir}" />
    <mkdir dir="${test.lib.dir}" />
    <mkdir dir="${run-external.lib.dir}" />
    <jpackage-deps jars="${install.build.jar.dependencies}"
                   dir="${build.lib.dir}" />
    <jpackage-deps jars="${install.run.jar.dependencies}"
                   dir="${run-external.lib.dir}"/>
    <copy toDir="${build.lib.dir}" overwrite="true">
      <fileset dir="${candlepin.home}/buildconf/tempjars">
          <include name="**/*.jar" />
          <include name="**/*.properties" />
      </fileset>
    </copy>
  </target>

  <target name="resolve-ivy" description="retrieve dependencies with ivy"
          depends="boot-deps,init-ivy" unless="installbuild">

    <!-- properties set here to show we are overriding default ivy values -->

    <!-- local directory -->
    <property name="ivy.default.ivy.user.dir" value="${user.home}/.ivy/${ant.project.name}/"/>
    <property name="ivy.local.default.artifact.pattern"
              value="[artifact]-[revision].[ext]" />
    <!-- public directory -->
    <property name="ivy.ivyrep.default.ivy.root" value="${ivyserver}/ivy/${ant.project.name}/" />
    <property name="ivy.ivyrep.default.artifact.root"
              value="${ivyserver}/ivy/${ant.project.name}/" />
    <property name="ivy.ivyrep.default.artifact.pattern"
              value="[artifact]-[revision].[ext]" />

    <ivy-retrieve/>
  </target>

  <!-- Generates Eclipse classpath   -->
  <target name="gen-dot-classpath" depends="link-jars"
          description="Generates eclipse .classpath file">
    <exec executable="${basedir}/buildconf/scripts/gen-eclipse-dot-classpath.py"
          output="${basedir}/.classpath" >
      <arg value="${eclipse.lib.dirs}:${candlepin.home}/buildconf/tempjars:${env.JAVA_HOME}/lib/tools.jar" />
      <arg value="${eclipse.libsrc.dirs}" />
    </exec>
  </target>

  <!-- fileset definition for eclipse plugins -->
  <fileset id="eclipse.lib" dir="/opt/eclipse/plugins">
        <include name="**/*.jar" />
  </fileset>


  <property name="dir.genhbm" value="build/schemagen/" />
  <target name="gen-schema" depends="init-taskdefs">
    <delete dir="${dir.genhbm}" />
    <mkdir dir="${dir.genhbm}" />

    <hibernatetool destdir="${dir.genhbm}">
        <property key="hibernate.connection.driver_class" value="org.postgresql.Driver"/>
        <property key="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>

        <classpath>
            <path location="build/classes"/>
        </classpath>

        <jpaconfiguration persistenceunit="test"/>

        <hbm2ddl export="false"
                 update="false"
                 drop="false"
                 create="true"
                 outputfilename="candlepin-proxy.sql"
                 delimiter=";"
                 format="false"
                 haltonerror="true"/>

        </hibernatetool>
  </target>
    
</project>
