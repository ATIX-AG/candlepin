#!/bin/sh 
function evalrc ()
{
    if [ "$1" -ne "0" ] ; then
        echo "$2"
        exit
    fi
}

function gendb ()
{
	echo "============ generating a new db =============="
    buildr candlepin:genschema
    evalrc $? "schema generation failed"

    dropdb -U candlepin candlepin
    evalrc $? "dropdb failed"

    createdb -U candlepin candlepin
    evalrc $? "createdb failed"

    psql -U candlepin candlepin < target/schemagen/candlepin-proxy.sql
    evalrc $? "schema creation failed"

    psql -U candlepin < code/schema/quartz/tables_postgres.sql
    evalrc $? "quartz schema failed"
}

function deploy ()
{
    VERSION="`grep Version: candlepin.spec | cut --delim=' ' -f2`"
    if [ -z $CLEAN ] ; then
        $SUDO rm -rf $DEPLOY
    else
        $SUDO rm -rf $CLEAN
    fi
    $SUDO cp target/candlepin-$VERSION.war $DEPLOY
}

function stopappserver ()
{
    # tc rpm /sbin/service tomcat6 stop
    # tc opt $TC_HOME/bin/catalina.sh stop
    # jboss opt $JBOSS_HOME/bin/shutdown.sh
    $STOP
}

function isrpm ()
{
    echo $1 | grep "var/lib" > /dev/null
    return $?
}

function upload_sat_cert ()
{
     echo ""
     echo "========= uploading sat cert =========="
     curl -d "@code/scripts/spacewalk-public.cert.json" -u guest:guest --header "Content-type: application/json"  --header "Accept: application/json" http://localhost:8080/candlepin/certificates
     echo""
}

function import_ca_cert_into_keystore
{
	echo "importing ca certificate"
	echo y | sudo keytool -importcert -alias candlepin_ca_crt -file /etc/candlepin/certs/candlepin-ca.crt -keystore $CONTAINER_CONF_DIR/keystore -storepass password
}

HOSTNAME=${HOSTNAME:-$(hostname)}
function generate_tomcat_certificate
{
	echo -n "\n" | sudo keytool -genkeypair -dname "CN=$HOSTNAME, OU=ateam, O=redhat,C=us"  -alias tomcat -keyalg RSA -keystore $CONTAINER_CONF_DIR/keystore -storepass password

}

function update_keystore_with_delete
{
    ALIAS=$1
    if [ "$ALIAS" = "tomcat" ]; then
        generate_tomcat_certificate
    else
        import_ca_cert_into_keystore
    fi
	if [ "$?" -ne "0" ] && [ "$FORCECERT" != "" ]; then
		echo "alias already exists. deleting..."
		sudo keytool -delete -alias $ALIAS -keystore $CONTAINER_CONF_DIR/keystore -storepass password
		if [ "$?" -ne "0" ]; then
			echo "couldn't delete $ALIAS alias, bailing."
			exit 1
		else
			echo "deleted $ALIAS."
		fi
        
        if [ "$ALIAS" = "tomcat" ]; then
            generate_tomcat_certificate
        else
            import_ca_cert_into_keystore
        fi

		if [ "$?" -ne "0" ]; then
			echo "failed to import cert. bailing."
			exit 1
		fi
	fi
}

function update_keystore
{
    update_keystore_with_delete "tomcat"
    update_keystore_with_delete "candlepin_ca_crt"
}

function update_tomcat_conf
{
	ruby -ne 'File.open($CONF_DIR/server.xml).readlines.gsub()'
}

function upload_products
{
    if [ -z "$IMPORTDIR" ]; then
	echo
	echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
	echo
	echo "Please point IMPORTDIR to the location of the product import scripts"
	echo
	echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
	return
    fi
    #BUILDDIR="buildconf/scripts/"
    CERTDIR="$IMPORTDIR/product_certs"
    # generates a sql script to import products and improrts it
    rm -rf $CERTDIR/deploy.sql
    $IMPORTDIR/import_product_certs.py $CERTDIR/*.pem > $CERTDIR/deploy.sql
    psql -U candlepin -f $CERTDIR/deploy.sql candlepin
}

# Read in user defined variables
if [ -f $HOME/.candlepinrc ] ; then
    source $HOME/.candlepinrc
fi

if [ "$JBOSS_HOME" != "" ]; then
    # we're using JBOSS AS
    isrpm $JBOSS_HOME

    if [ "$?" -ne 0 ]; then
        START="$JBOSS_HOME/bin/run.sh 2>&1 > console.log &"
        STOP="$JBOSS_HOME/bin/shutdown.sh --shutdown"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    else
        SUDO="sudo"
        START="sudo /sbin/service jbossas start"
        STOP="sudo /sbin/service jbossas stop"
        DEPLOY="$JBOSS_HOME/server/default/deploy/"
    fi
    CONTAINER_CONF_DIR="/etc/tomcat6/conf"
else
    # use tomcat 6, if not specified
    TC=tomcat6
    if [ -z $TC_HOME ]; then
        TC_HOME=/var/lib/$TC
    fi

    isrpm $TC_HOME

    if [ "$?" -ne 0 ]; then
        START="$TC_HOME/bin/catalina.sh start"
        STOP="$TC_HOME/bin/catalina.sh stop"
        CONTAINER_CONF_DIR="$TC_HOME/conf"
    else
        SUDO="sudo"
        START="sudo /sbin/service $TC start"
        STOP="sudo /sbin/service $TC stop"
        CONTAINER_CONF_DIR="/etc/$TC"
    fi

    DEPLOY="$TC_HOME/webapps/candlepin.war"
    CLEAN="$TC_HOME/webapps/candlepin/"
fi

# stop the appserver
eval $STOP

# generate the postgresql DB

if [ "$GENDB" != "" ]; then
	gendb	
fi

buildr clean package test=no

# generate SSL certs if they are needed
sh -x `dirname $0`/gen-certs

# update keystore file and put it into tomcat's conf directory
update_keystore

# update server.xml
sudo python buildconf/scripts/update-server-xml.py $CONTAINER_CONF_DIR

# deploy the webapp
deploy

eval $START

sleep 10
echo "Initializing Candlepin..."
wget -qO- http://localhost:8080/candlepin/admin/init

#upload_sat_cert

upload_products
