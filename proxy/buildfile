# Generated by Buildr 1.3.5, change to your liking
# Version number for this release
VERSION_NUMBER = "1.0.0"
# Group identifier for your projects
GROUP = "candlepin"
COPYRIGHT = ""

#############################################################################
# DEPENDENCIES
#############################################################################

RESTEASY = [group('jaxrs-api', 
                  'resteasy-jaxrs',
                  'resteasy-jaxb-provider', 
                  'resteasy-jettison-provider', 
                  'resteasy-guice', 
                  :under => 'org.jboss.resteasy',
                  :version => '1.2.1.GA'), 
            'javax.persistence:persistence-api:jar:1.0.2',
            'org.apache:xalan-j2:jar:2.6.0',
            'org.scannotation:scannotation:jar:1.0.2',
            'org.codehaus.jettison:jettison:jar:1.1']

JACKSON = [group('jackson-core-lgpl', 
                 'jackson-mapper-lgpl', 
                 'jackson-jaxrs',
                 :under => 'org.codehaus.jackson',
                 :version => '1.4.1')]
JUNIT = ['junit:junit:jar:4.5', 'org.mockito:mockito-all:jar:1.8.1']
LOG4J = 'log4j:log4j:jar:1.2.14'
HIBERNATE = ['org.hibernate:hibernate3:jar:3.3.2',
             'org.hibernate:hibernate-annotations:jar:3.4.0',
             'org.hibernate:hibernate-commons-annotations:jar:3.4.0',
             'org.hibernate:hibernate-entitymanager:jar:3.4.0',
             'org.hibernate:hibernate-tools:jar:3.2.4',
             'org.hibernate:hibernate-validator:jar:3.1.0.GA',
             'antlr:antlr:jar:2.7.6',
             'org.objectweb.asm:asm:jar:3.1',
             'net.sf.cglib:cglib:jar:2.2',
             'javassist:javassist:jar:3.9.0.GA',
             'javax.transaction:jta:jar:1.1',
             'org.slf4j:slf4j-api:jar:1.5.8',
             'org.slf4j:slf4j-simple:jar:1.5.8',
             'org.freemarker:freemarker:jar:2.3.15' ]
DB = 'org.postgresql:postgresql:jar:8.4-701'
COMMONS = ['org.apache.commons:commons-beanutils:jar:1.7.0',
           'org.apache.commons:commons-codec:jar:1.4',
           'commons-cli:commons-cli:jar:1.2',
           'commons-pool:commons-pool:jar:1.2',
           'commons-dbcp:commons-dbcp:jar:1.2.1',
           'org.apache.commons:commons-collections:jar:3.1',
           'org.apache.commons:commons-io:jar:1.3.2',
           'org.apache.commons:commons-logging:jar:1.1.1']
JDOM = 'org.jdom:jdom:jar:1.0'
DOM4J = ['dom4j:dom4j:jar:1.6.1']
HSQLDB = ['hsqldb:hsqldb:jar:1.8.0.10']

CHECKSTYLE = ['com.puppycrawl:checkstyle:jar:5.0',
              'antlr:antlr:jar:2.7.6',
              'google-collect:google-collect:jar:snapshot-20090211',
              COMMONS]

BOUNCYCASTLE = group('bcprov', 'bcpg', :under=>'org.bouncycastle', :version=>'1.43')
GUICE =  [group('guice', 'guice-assistedinject', 'guice-multibindings', 'guice-servlet', 'guice-throwingproviders', :under=>'com.google.guice', :version=>'2.0'),
           'com.wideplay.warp:warp-persist:jar:2.0-20090214',
           'com.sun.jersey:jersey-guice:jar:1.1.4.1',
           'aopalliance:aopalliance:jar:1.0',
           'javax.servlet:servlet-api:jar:2.5']

QUARTZ = 'org.quartz-scheduler:quartz:jar:1.7.3'

#############################################################################
# REPOSITORIES
#
# Specify Maven 2.0 remote repositories here, like this:
#############################################################################
repositories.remote << "http://jmrodri.fedorapeople.org/ivy/candlepin"
repositories.remote << "http://www.ibiblio.org/maven2/"
repositories.remote << "http://download.java.net/maven/2/"
repositories.remote << "http://repo2.maven.org/maven2/org/mockito/mockito-all"
repositories.remote << "http://repository.jboss.com/maven2/"

#############################################################################
# PROJECT BUILD
#############################################################################
desc "The Proxy project"
define "candlepin" do

  #
  # project info
  #
  project.version = VERSION_NUMBER
  project.group = GROUP
  manifest["Implementation-Vendor"] = COPYRIGHT

  #
  # eclipse settings
  # http://buildr.apache.org/more_stuff.html#eclipse
  #
  eclipse.natures 'org.eclipse.jdt.core.javanature'
  eclipse.natures 'net.sf.eclipsecs.core.CheckstyleNature'
  eclipse.builders 'org.eclipse.jdt.core.javabuilder'
  eclipse.builders 'net.sf.eclipsecs.core.CheckstyleBuilder'

  #
  # building
  #
  compile.options.target = '1.6'

  compile.with COMMONS, DB, RESTEASY, LOG4J, HIBERNATE, BOUNCYCASTLE, JDOM, GUICE, DOM4J, CHECKSTYLE, JACKSON, QUARTZ
 
  #
  # testing
  #
  test.setup do |task|
    filter('src/test/java').exclude('*.java').into('target/test/classes').run 
    filter('src/main/resources/META-INF').into('target/classes/META-INF').run
  end
  test.teardown { rm_rf 'target/classes/META-INF' }
  test.with COMMONS, DB, RESTEASY, JUNIT, LOG4J, HIBERNATE, BOUNCYCASTLE, JDOM, DOM4J, HSQLDB, GUICE, QUARTZ

  #
  # javadoc projects
  #
  javadoc

  package(:jar, :id=>'candlepin-api').clean.include 'target/classes/org/fedoraproject/candlepin/service','target/classes/org/fedoraproject/candlepin/model', :path=>"org/fedoraproject/candlepin/"
  package(:war, :id=>"candlepin").libs << HSQLDB
  
  #
  # to use: buildr candlepin:genschema
  #
  task :genschema do
    begin
      ant('gen-schema') do |ant|
        rm_rf 'target/schemagen'
        mkdir_p 'target/schemagen'
        filter('src/main/resources/META-INF').into('target/classes/META-INF').run
  
        ant.taskdef :name=>'schema',
          :classname=>'org.hibernate.tool.ant.HibernateToolTask',
          :classpath=>Buildr.artifacts([HIBERNATE, HSQLDB, DB, COMMONS, LOG4J, JDOM, DOM4J, RESTEASY]).each(&:invoke).map(&:name).join(File::PATH_SEPARATOR)
      
        ant.schema :destdir=>'target/schemagen' do
          ant.classpath :path=>_('target/classes')
          ant.jpaconfiguration :persistenceunit=>'production'
          ant.hbm2ddl :export=>'false', :update=>'false', :drop=>'false', :create=>'true', 
            :outputfilename=>'candlepin-proxy.sql', :delimiter=>';', :format=>'false', :haltonerror=>'true'
        end
      end
    ensure
      rm_rf 'target/classes/META-INF'
    end
  end

  #
  # CHECKSTYLE task, a Buildr plugin would be better, but this is faster
  #
  task :checkstyle do
    begin
      ant('checkstyle') do |ant|
        rm_rf 'reports/checkstyle_report.xml'
        mkdir_p 'reports'

        ant.taskdef :resource=>"checkstyletask.properties",
          :classpath=>Buildr.artifacts(CHECKSTYLE).each(&:invoke).map(&:name).join(File::PATH_SEPARATOR)

        # check the main src
        ant.checkstyle :config=>"buildconf/checkstyle.xml",
                       :classpath=>Buildr.artifacts(CHECKSTYLE, JDOM, RESTEASY).each(&:invoke).map(&:name).join(File::PATH_SEPARATOR) do


          ant.classpath :path=>_('target/classes')
          ant.formatter :type=>'plain'
          ant.formatter :type=>'xml', :toFile=>"reports/checkstyle_report.xml"

          ant.property :key=>'javadoc.method.scope', :value=>'public'
          ant.property :key=>'javadoc.type.scope', :value=>'package'
          ant.property :key=>'javadoc.var.scope', :value=>'package'
          ant.property :key=>'javadoc.lazy', :value=>'false'
          ant.property :key=>'javadoc.missing.param', :value=>'true'
          ant.property :key=>'checkstyle.cache.file', :value=>'target/checkstyle.cache.src'
          ant.property :key=>'checkstyle.header.file', :value=>'buildconf/LICENSE.txt'

          ant.fileset :dir=>"src/main/java", :includes=>'**/*.java'
        end

        # check the test src
        ant.checkstyle :config=>"buildconf/checkstyle.xml" do

          ant.classpath :path=>_('target/test/classes')
          ant.formatter :type=>'plain'
          ant.formatter :type=>'xml', :toFile=>"reports/checkstyle_report.xml"

          ant.property :key=>'javadoc.method.scope', :value=>'nothing'
          ant.property :key=>'javadoc.type.scope', :value=>'nothing'
          ant.property :key=>'javadoc.var.scope', :value=>'nothing'
          ant.property :key=>'javadoc.lazy', :value=>'true'
          ant.property :key=>'javadoc.missing.param', :value=>'false'
          ant.property :key=>'checkstyle.cache.file', :value=>'target/checkstyle.cache.src'
          ant.property :key=>'checkstyle.header.file', :value=>'buildconf/LICENSE.txt'

          ant.fileset :dir=>"src/test/java", :includes=>'**/*.java'
          #ant.fileset :dir=>"src/functionaltest/java", :includes=>'**/*.java'
        end
      end
    end
  end

end

#==========================================================================
# Cucumber testing
#==========================================================================
#require 'cucumber/rake/task'
#
#Cucumber::Rake::Task.new do |task|
#  task.cucumber_opts = %w{--format pretty}
#end
#
#Cucumber::Rake::Task.new(:cucumber_html) do |task|
#  task.cucumber_opts = %w{--format html}
#end

